use crate::{
	ast::{
		Token,
		Expr,
		Literal,
		Variable,
		BinOp,
		BinOpKind,
		UnaryOp,
		UnaryOpKind,
		InputStatement,
		Function,
		Call,
		UserParseError,
	},
	span::SpannedValue,
};
use std::sync::Arc;

use lalrpop_util::ParseError;

grammar(source: &crate::span::MaybeNamed);

extern {
	type Location = usize;
	type Error = crate::ast::UserParseError;

	enum Token {
		"(" => Token::LParen,
		")" => Token::RParen,
		"|>" => Token::Redirect,
		"||" => Token::LOr,
		"&&" => Token::LAnd,
		"|" => Token::BOr,
		"&" => Token::BAnd,
		"^" => Token::BXor,
		"=" => Token::Equal,
		"+" => Token::Plus,
		"-" => Token::Minus,
		"*" => Token::Times,
		"**" => Token::Power,
		"/" => Token::Divide,
		"//" => Token::IntDivide,
		">>" => Token::RShift,
		"<<" => Token::LShift,
		"%" => Token::Percent,
		"\\" => Token::Backslash,
		"." => Token::Dot,
		":" => Token::Colon,
		"'(" => Token::UnitParen,
		"," => Token::Comma,
		"as" => Token::As,
		"true" => Token::True,
		"false" => Token::False,
		"==" => Token::LogicalEquals,
		"!=" => Token::Different,
		">=" => Token::GreaterOrEqual,
		"<=" => Token::LesserOrEqual,
		">" => Token::Greater,
		"<" => Token::Lesser,
		num => Token::Number(<i64>),
		float => Token::Float(<f64>),
		ident => Token::Ident(<Arc<str>>),
		unit => Token::Unit(<Arc<str>>),
		binding => Token::Binding(<Arc<str>>),
	}
}

Spn<T>: SpannedValue<T> = {
    <start:@L> <value:T> <end:@R> => SpannedValue {
        start, 
        value, 
        end, 
        source: source.clone()
    }
};

Variable: Variable = ident+ => Variable(<>);
SpnBox<T>: Box<SpannedValue<T>> = Spn<T> => Box::new(<>);
Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

pub InputStatement: SpannedValue<InputStatement> = Spn<InputStatementInner> => <>;

InputStatementInner: InputStatement = {
	"|>" <Spn<Function>> => InputStatement::LastRedirect(<>),
	Expr => InputStatement::Expr(<>),
	<SpnBox<Expr>> "as" <ManyUnit> => InputStatement::Expr(Expr::Dimensioned(<>)),
	"." <Spn<ident>> <CommandValue?> => InputStatement::Command(<>),
};

CommandValue: SpannedValue<Expr> = "=" <Spn<Expr>> => <>;

Function: Function = {
	Spn<Variable> => Function::Ref(<>),
};

pub Expr: Expr = {
	<Spn<Variable>> "=" <SpnBox<Expr>> => Expr::Assign(<>),
	ExprPipe => <>,
};

Redirect: Call = <val:Spn<ExprPipe>> "|>" <fun:Spn<Function>> => Call {fun, args: vec![val]};

ExprPipe: Expr = {
	Spn<Redirect> => Expr::Call(<>),
	ExprBoolOr => <>,
};

ExprBoolOr: Expr = {
	<lhs:SpnBox<ExprBoolOr>> "||" <rhs:SpnBox<ExprBoolAnd>> => Expr::BinOp(BinOp{<>, kind: BinOpKind::LogicalOr}),
	ExprBoolAnd => <>,
};

ExprBoolAnd: Expr = {
	<lhs:SpnBox<ExprBoolAnd>> "&&" <rhs:SpnBox<ExprCmp>> => Expr::BinOp(BinOp{<>, kind: BinOpKind::LogicalAnd}),
	ExprCmp => <>,
};

ExprCmp: Expr = {
	<lhs:SpnBox<ExprLOr>> ">" <rhs:SpnBox<ExprLOr>> => Expr::BinOp(BinOp{<>, kind: BinOpKind::Greater}),
	<lhs:SpnBox<ExprLOr>> ">=" <rhs:SpnBox<ExprLOr>> => Expr::BinOp(BinOp{<>, kind: BinOpKind::GreaterOrEqual}),
	<lhs:SpnBox<ExprLOr>> "<" <rhs:SpnBox<ExprLOr>> => Expr::BinOp(BinOp{<>, kind: BinOpKind::Lesser}),
	<lhs:SpnBox<ExprLOr>> "<=" <rhs:SpnBox<ExprLOr>> => Expr::BinOp(BinOp{<>, kind: BinOpKind::LesserOrEqual}),
	<lhs:SpnBox<ExprLOr>> "==" <rhs:SpnBox<ExprLOr>> => Expr::BinOp(BinOp{<>, kind: BinOpKind::LogicalEquals}),
	<lhs:SpnBox<ExprLOr>> "!=" <rhs:SpnBox<ExprLOr>> => Expr::BinOp(BinOp{<>, kind: BinOpKind::Different}),
	ExprLOr => <>,
};

ExprLOr: Expr = {
	<lhs:SpnBox<ExprShift>> "|" <rhs:SpnBox<ExprAdd>> => Expr::BinOp(BinOp{<>, kind: BinOpKind::BinaryOr}),
	ExprLXor => <>,
};

ExprLXor: Expr = {
	<lhs:SpnBox<ExprShift>> "^" <rhs:SpnBox<ExprAdd>> => Expr::BinOp(BinOp{<>, kind: BinOpKind::BinaryXor}),
	ExprLAnd => <>,
};

ExprLAnd: Expr = {
	<lhs:SpnBox<ExprShift>> "&" <rhs:SpnBox<ExprAdd>> => Expr::BinOp(BinOp{<>, kind: BinOpKind::BinaryAnd}),
	ExprShift => <>,
};

ExprShift: Expr = {
	<lhs:SpnBox<ExprShift>> "<<" <rhs:SpnBox<ExprAdd>> => Expr::BinOp(BinOp{<>, kind: BinOpKind::LeftShift}),
	<lhs:SpnBox<ExprShift>> ">>" <rhs:SpnBox<ExprAdd>> => Expr::BinOp(BinOp{<>, kind: BinOpKind::RightShift}),
	ExprAdd => <>,
};

ExprAdd: Expr = {
	<lhs:SpnBox<ExprAdd>> "+" <rhs:SpnBox<ExprMult>> => Expr::BinOp(BinOp{<>, kind: BinOpKind::Sum}),
	<lhs:SpnBox<ExprAdd>> "-" <rhs:SpnBox<ExprMult>> => Expr::BinOp(BinOp{<>, kind: BinOpKind::Diff}),
	ExprMult => <>,
};

ExprMult: Expr = {
	<lhs:SpnBox<ExprMult>> "/" <rhs:SpnBox<ExprUnary>> => Expr::BinOp(BinOp{<>, kind: BinOpKind::Divide}),
	<lhs:SpnBox<ExprMult>> "*" <rhs:SpnBox<ExprUnary>> => Expr::BinOp(BinOp{<>, kind: BinOpKind::Times}),
	ExprUnary => <>,
};

UnaryKind: UnaryOpKind = {
	"-" => UnaryOpKind::Minus,
	"+" => UnaryOpKind::Plus,
};

ExprUnary: Expr = {
	<kind:UnaryKind> <operand:SpnBox<ExprLiteral>> => Expr::UnaryOp(UnaryOp{<>}),
	ExprLiteral => <>,
};

I16: i16 = <n:Spn<num>> =>? match (*n).try_into() {
	Err(_) => Err(ParseError::User {
		error: UserParseError::OutOfRange {
			ty: "i16",
			num: n.value,
			span: n.start..n.end,
		}
	}),
	Ok(n) => Ok(n),
};

Unit: (Arc<str>, i16) = {
	unit => (<>, 1),
	<u:unit> <n:I16> => (<>),
	"(" <u:unit> "-" <e:I16> ")"=> (u, -e),
};

UnitId: (Arc<str>, i16) = {
	ident => (<>, 1),
	ident I16 => (<>),
	<u:ident> "-" <e:I16> => (u, (-e)),
	"/" <ident> => (<>, -1),
	"/" <u:ident> <e:I16> => (u, (-e)),
};

ManyUnit: Vec<SpannedValue<(Arc<str>, i16)>> = {
	Spn<Unit>+ => <>,
	"'(" <Spn<UnitId>+> ")" => <>,
};

Call: Call = {
	<fun:Spn<Function>> "(" <args:Comma<Spn<Expr>>> ")" => Call { <> },
};

LiteralExpr: Expr = {
	Spn<Literal> => Expr::Literal(<>),
};

ExprLiteral: Expr = {
	LiteralExpr => <>,
	SpnBox<LiteralExpr> ManyUnit => Expr::Dimensioned(<>),
	"(" <SpnBox<Expr>> "as" <ManyUnit> ")" => Expr::Dimensioned(<>),
	Spn<Variable> => Expr::Variable(<>),
	Spn<Call> => Expr::Call(<>),
	"(" <Expr> ")" => <>,
};

Literal: Literal = {
	num => Literal::Number(<>),
	float => Literal::Float(<>),
	"true" => Literal::Bool(true),
	"false" => Literal::Bool(false),
	":" <ident> => Literal::Atom(<>),
};
